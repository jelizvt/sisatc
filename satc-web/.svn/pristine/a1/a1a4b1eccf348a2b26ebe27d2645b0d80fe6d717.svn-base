package com.sat.sisat.predial.managed;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import org.richfaces.component.html.HtmlComboBox;

import com.sat.sisat.common.util.BaseManaged;
import com.sat.sisat.common.util.Constante;
import com.sat.sisat.common.util.DateUtil;
import com.sat.sisat.common.util.FacesUtil;
import com.sat.sisat.common.util.WebMessages;
import com.sat.sisat.common.vo.Mensaje;
import com.sat.sisat.persistence.entity.RjMes;
import com.sat.sisat.persistence.entity.RpDjarbitrio;
import com.sat.sisat.persistence.entity.RpDjconstruccion;
import com.sat.sisat.persistence.entity.RpDjpredial;
import com.sat.sisat.persistence.entity.RpDjuso;
import com.sat.sisat.persistence.entity.RpDjusoDetalle;
import com.sat.sisat.persistence.entity.RpTipoUso;
import com.sat.sisat.predial.business.RegistroPrediosBoRemote;
import com.sat.sisat.predial.dto.NivelConstruccion;

@ManagedBean
@ViewScoped
public class UsosPredioxNivelManaged extends BaseManaged {
	
	@EJB
	RegistroPrediosBoRemote registroPrediosBo;
	
	Mensaje mensaje=new Mensaje(); 
	
	private RpDjuso rpDjuso;
	
	private HtmlComboBox cmbRpTipoUso;
	private List<SelectItem> lstTipoUso=new ArrayList<SelectItem>();

	private HashMap<String, Integer> mapRpTipoUso=new HashMap<String, Integer>();
	private HashMap<Integer,String> mapIRpTipoUso=new HashMap<Integer,String>();
	private String cmbValueRpTipoUso;
	
	private List<SelectItem> lstmes=new ArrayList<SelectItem>();
	private HashMap<String, String> mapRjMes=new HashMap<String, String>();
	private HashMap<String, String> mapIRjMes=new HashMap<String, String>();
	
	private ArrayList<NivelConstruccion> recordsxNivel;
	
	private NivelConstruccion currentItem;
	private Boolean disabled;
	
	public UsosPredioxNivelManaged(){
		
	}
	@PostConstruct
	public void init(){
		try{
			
//			List<RpTipoUso> lstRpTipoUso=registroPrediosBo.getAllRpTipoUso();
//			Iterator<RpTipoUso> it1 = lstRpTipoUso.iterator();  
//			lstTipoUso= new ArrayList<SelectItem>();
//			 
//	        while (it1.hasNext()){
//	        	RpTipoUso obj = it1.next();
//	        	lstTipoUso.add(new SelectItem(obj.getDescripcion().trim(),String.valueOf(obj.getTipoUsoId())));
//	        	mapRpTipoUso.put(obj.getDescripcion().trim(), obj.getTipoUsoId());
//	        	mapIRpTipoUso.put(obj.getTipoUsoId(),obj.getDescripcion().trim());
//	        }
	        
			List<RjMes> lstRjMes=registroPrediosBo.getAllRjMes();
			Iterator<RjMes> it2 = lstRjMes.iterator();  
			lstmes= new ArrayList<SelectItem>();
			 
	        while (it2.hasNext()){
	        	RjMes obj = it2.next();  
	        	lstmes.add(new SelectItem(obj.getDescripcion().trim(),String.valueOf(obj.getMesId())));
	        	mapRjMes.put(obj.getDescripcion().trim(), obj.getMesId());
	        	mapIRjMes.put(obj.getMesId(),obj.getDescripcion().trim());
	        }
	        
	        rpDjuso=new RpDjuso();
	        //Se corrige el aï¿½o de afectacion para los USOS
	        Integer djId=(Integer)FacesUtil.getSessionMapValue(FacesContext.getCurrentInstance(), "NextDjId");
			if(djId==null||djId==Constante.RESULT_PENDING){
				rpDjuso.setAnnoAfectacion(DateUtil.getAnioActual());
			}else{
				RpDjpredial rpdjpredial = registroPrediosBo.getRpDjpredial(djId);
				rpDjuso.setAnnoAfectacion(rpdjpredial.getAnnoDj());
			}
			
			/**
			 * Usos 2016 - Diferenciado por tramos.
			 * 
			 * */
			
			List<RpTipoUso> lstRpTipoUsos=registroPrediosBo.getAllRpTipoUsos(rpDjuso.getAnnoAfectacion());
			Iterator<RpTipoUso> it3 = lstRpTipoUsos.iterator();  
			lstTipoUso= new ArrayList<SelectItem>();
			 
	        while (it3.hasNext()){
	        	RpTipoUso obj = it3.next();
	        	lstTipoUso.add(new SelectItem(obj.getDescripcion().trim(),String.valueOf(obj.getTipoUsoId())));
	        	mapRpTipoUso.put(obj.getDescripcion().trim(), obj.getTipoUsoId());
	        	mapIRpTipoUso.put(obj.getTipoUsoId(),obj.getDescripcion().trim());
	        }
	        
		}catch(Exception e){
			e.printStackTrace();
			WebMessages.messageFatal(e);			
		}
	}
	
	public void salir(){
		
	}
	
	public boolean validaDetalle(){
		boolean result=true;
		try{
			if(recordsxNivel.size()<=0){
				WebMessages.messageError("No existe niveles para uso seleccionado");
				result=false;
			}else{
				//valida la suma area asignada
				Iterator<NivelConstruccion> it = recordsxNivel.iterator();
				double areaAsignadaTotal=0;
		        while (it.hasNext()){
		        	NivelConstruccion detalle=it.next();
		        	double areaTotal=detalle.getAreaConstruccion().doubleValue();
		        	double areaUsada=(detalle.getAreaUsada()==null)?0:detalle.getAreaUsada().doubleValue();
		        	if(areaTotal>areaUsada){
			        	if(detalle.getConfirmacion()==Boolean.TRUE){
			        		areaTotal=detalle.getAreaConstruccion().doubleValue();
			        		areaUsada=detalle.getAreaUsada()==null?0:detalle.getAreaUsada().doubleValue();
			        		double areaAsignada=detalle.getAreaAsignada().doubleValue();
				        	if((areaTotal-(areaAsignada+areaUsada))<0){
				        		result=false;
				        		WebMessages.messageError("Area asignada para este uso del "+detalle.getDenoTipoNivel()+" es debe ser menor a "+(areaTotal-areaUsada));
				        	}else{
				        		areaAsignadaTotal=areaAsignadaTotal+areaAsignada;
				        	}
				        	
				        	if(!validaRangoFechas(detalle.getMesInicio().trim(), detalle.getMesFin().trim())){
				        		result=false;
				        		WebMessages.messageError("Rango de fechas del "+detalle.getDenoTipoNivel()+" nro "+detalle.getNroNivel()+" no es valido");
				        	}
			        	}else{
			        		result=false;
			        		WebMessages.messageError("Se requiere confirmacion de los datos del "+detalle.getDenoTipoNivel()+" nro "+detalle.getNroNivel());
			        	}
		        	}else{
		        		result=true;
		        	}
		        }
		        if(areaAsignadaTotal==0){
		        	result=false;
	        		WebMessages.messageError("Area total asignada para el uso debe ser mayor a cero ");
		        }
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return result;
	}
	
	
	public boolean validaRangoFechas(String fechaIni,String fechaFin){
		boolean result=false;
		try{
			Integer fechaIniId=Integer.valueOf(mapRjMes.get(fechaIni));
			Integer fechaFinId=Integer.valueOf(mapRjMes.get(fechaFin));
			if(fechaFinId>=fechaIniId)
				result=true;
		}catch(Exception e){
			e.printStackTrace();
		}
		return result;
	}
	/*
	public boolean validaRangoTotalFechas(Integer djId,Integer construccionId,String mesInicio,String mesFin){
		boolean result=true;
		try{
			HashMap<Integer, String> mapValida=new HashMap<Integer, String>();
			Integer djArbitrioId=registroPrediosBo.getDjArbitrioId(djId);
			if(djArbitrioId!=null&&djArbitrioId>0){
				List<RangoMeses> rangos=registroPrediosBo.getRangoFechas(djArbitrioId, construccionId);
				
				Iterator<RangoMeses> it = rangos.iterator();
				while (it.hasNext()){
					RangoMeses rango=it.next();
					Integer inicio=Integer.valueOf(rango.getMesInicio());
					Integer fin=Integer.valueOf(rango.getMesFin());
					for(int i=inicio;i<=fin;i++){
						mapValida.put(i,String.valueOf(i));
					}
		        }
				Integer mfin=Integer.valueOf(mapRjMes.get(mesFin));
				for(int i=minicio;i<=mfin;i++){
					if(mapValida.get(i)!=null){
						result=false;
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return result;
	}
	*/
	
	public void guardar(){
		try{
			Integer djId=(Integer)FacesUtil.getSessionMapValue(FacesContext.getCurrentInstance(), "NextDjId");
			if(djId==null||djId==Constante.RESULT_PENDING){
				RegistroPredioManaged registroPredio = (RegistroPredioManaged) getManaged("registroPredioManaged");
				registroPredio.inscripcionPredio();
			}
			djId=(Integer)FacesUtil.getSessionMapValue(FacesContext.getCurrentInstance(), "NextDjId");
			
			if(djId!=null){
				if(validaDetalle()){
					Integer djArbitrioId=registroPrediosBo.getDjArbitrioId(djId);
					if(djArbitrioId==null){
						RpDjarbitrio rpDjarbitrio=new RpDjarbitrio();  
						rpDjarbitrio.setDjId(djId);
						
						rpDjarbitrio.setEstado(Constante.ESTADO_ACTIVO);
						//cc: rpDjarbitrio.setFechaRegistro(DateUtil.getCurrentDate());
						//cc: rpDjarbitrio.setTerminal(Constante.TERMINAL);
						//cc: rpDjarbitrio.setUsuarioId(Constante.USUARIO_ID);
						
						int result=registroPrediosBo.guardarDjArbitrioId(rpDjarbitrio);
					}
					
					djArbitrioId=registroPrediosBo.getDjArbitrioId(djId);
					if(djArbitrioId!=null){
						getRpDjuso().setDjarbitrioId(djArbitrioId);
						//rpDjuso.annoAfectacion
						//rpDjuso.areaUso
						
						//cmbValueRpTipoUso
						getRpDjuso().setTipoUsoId(mapRpTipoUso.get(cmbValueRpTipoUso));
						//cmbValueMesInicio
						getRpDjuso().setMesInicioId(null);//por que existe detalle
						//cmbValueMesFin
						getRpDjuso().setMesFinId(null);//por que existe detalle
						getRpDjuso().setEstado(Constante.ESTADO_ACTIVO);
											
						//cc: getRpDjuso().setUsuarioId(Constante.USUARIO_ID);
						//cc: getRpDjuso().setFechaRegistro(DateUtil.getCurrentDate());
						//cc: getRpDjuso().setTerminal(Constante.TERMINAL);
						
						getRpDjuso().setAreaUso(getSumaAreaUso());
						int result=0;
						if(getRpDjuso().getDjusoId()>0){
							result=registroPrediosBo.actualizaRpDjuso(getRpDjuso());
							guardarDetalleUsoxNivel(getRpDjuso().getDjusoId());
						}
						else{
							result=registroPrediosBo.guardarRpDjuso(getRpDjuso());
							int djUsoId=registroPrediosBo.getUltimoDjUsoId(djArbitrioId);
							guardarDetalleUsoxNivel(djUsoId);
						}
						
						if(result>0){
							RegistroPredioManaged registroPredio = (RegistroPredioManaged) getManaged("registroPredioManaged");
							if(registroPredio!=null){
								registroPredio.loadUsosPredio();
								if(getRpDjuso().getDjusoId()==0)
									limpiar();
							}
						}else{
							WebMessages.messageError("No existe DJ seleccionado");
						}
					}
				}
			}else{
				
			}
		}catch(Exception e){
			e.printStackTrace();
			WebMessages.messageFatal(e);			
		}
	}
	
	public BigDecimal getSumaAreaUso(){
		BigDecimal suma=new BigDecimal(0);
		Iterator<NivelConstruccion> it = recordsxNivel.iterator();
        while (it.hasNext()){
        	NivelConstruccion nivel=it.next();
        	if(nivel.getAreaAsignada()!=null){
        		suma=suma.add(nivel.getAreaAsignada());
        	}else{
        		suma=suma.add(BigDecimal.ZERO);
        	}
        }
        return suma;
	}
	
	public void guardarDetalleUsoxNivel(int djUsoId){
		try{
			Iterator<NivelConstruccion> it = recordsxNivel.iterator();
			int res=registroPrediosBo.deleteRpDjUsoDetalle(djUsoId);
	        while (it.hasNext()){
	        	NivelConstruccion nivel=it.next();
	        	RpDjusoDetalle detalle=new RpDjusoDetalle();
	        	detalle.setDjusoId(djUsoId);
	        	detalle.setConstruccionId(nivel.getConstruccionId());
	        	detalle.setMesInicio(mapRjMes.get(nivel.getMesInicio().trim()));
	        	detalle.setMesFin(mapRjMes.get(nivel.getMesFin().trim()));
	        	detalle.setAreaUso(nivel.getAreaAsignada());
	        	detalle.setEstado(Constante.ESTADO_ACTIVO);
	        	//cc: detalle.setFechaRegistro(DateUtil.getCurrentDate());
	        	//cc: detalle.setTerminal(Constante.TERMINAL);
	        	//cc: detalle.setUsuarioId(Constante.USUARIO_ID);
	        	detalle.setDjusoDetalleId(Constante.RESULT_PENDING);
	        	detalle.setGlosa(nivel.getReferencia());
	        	
	        	int result=registroPrediosBo.guardarRpDjusoDetalle(detalle);
	        }
		}catch(Exception e){
			e.printStackTrace();
			WebMessages.messageFatal(e);
		}
	}
	
	public void delete(){
		try{
			if(rpDjuso!=null){
				int result=registroPrediosBo.deleteRpDjuso(rpDjuso.getDjarbitrioId(),rpDjuso.getDjusoId());
				if(result>0){
					RegistroPredioManaged registro = (RegistroPredioManaged) getManaged("registroPredioManaged");
					registro.loadUsosPredio();
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	private ArrayList<RpDjconstruccion> records;
	
	
	public ArrayList<RpDjconstruccion> getRecords() {
		return records;
	}

	public void setRecords(ArrayList<RpDjconstruccion> records) {
		this.records = records;
	}

	public void loadNewNivelesConstruccion(ArrayList<RpDjconstruccion> records){
		try{
			setRecords(records);
			Iterator<RpDjconstruccion> it = records.iterator();  
			recordsxNivel=new ArrayList<NivelConstruccion>();
	        while (it.hasNext()){
	        	RpDjconstruccion obj = it.next();
	        	NivelConstruccion nivel=new NivelConstruccion(obj); 
	        	
	        	Integer djId=(Integer)FacesUtil.getSessionMapValue(FacesContext.getCurrentInstance(), "NextDjId");
	        	Integer djArbitrioId=registroPrediosBo.getDjArbitrioId(djId);
	        	if(djArbitrioId!=null&&djArbitrioId>0){
	        		nivel.setAreaUsada(registroPrediosBo.getAreaUsada(djArbitrioId,nivel.getConstruccionId()));
	        	}else{
	        		nivel.setAreaUsada(new BigDecimal(0));
	        	}
	        	nivel.setAreaAsignada(new BigDecimal(0));
	        	nivel.setMesInicio("Enero");
	        	nivel.setMesFin("Diciembre");
	        	nivel.setConfirmacion(Boolean.FALSE);
	        	//nivel.setConfirmacion(Boolean.TRUE);//Activar esta lÃ­nea, cuando soliciten registrar usos de pricos, como los Centros Comerciales: 24/12/2014
	        	
	        	recordsxNivel.add(nivel);
	        	loadUsosSinTerreno();	/** 17-09-2014* No muestra el uso Terreno sin Construir, cuando existe una construcciÃ³n: Memorandum:006-012-846 */

	        	
	        }
		}catch(Exception e){
			WebMessages.messageFatal(e);
			e.printStackTrace();
		}
	}
	
	public void loadUsosSinTerreno() throws Exception {
		if (recordsxNivel!=null){
			
			List<RpTipoUso> lstRpTipoUso=registroPrediosBo.getAllRpTipoUsoSinTerreno(rpDjuso.getAnnoAfectacion());
			Iterator<RpTipoUso> it1 = lstRpTipoUso.iterator();  
			lstTipoUso= new ArrayList<SelectItem>();
			 
	        while (it1.hasNext()){
	        	RpTipoUso obj = it1.next();
	        	lstTipoUso.add(new SelectItem(obj.getDescripcion().trim(),String.valueOf(obj.getTipoUsoId())));
	        	mapRpTipoUso.put(obj.getDescripcion().trim(), obj.getTipoUsoId());
	        	mapIRpTipoUso.put(obj.getTipoUsoId(),obj.getDescripcion().trim());
	        }
		}
	}
	
	public void loadEditNivelesConstruccion(ArrayList<RpDjconstruccion> records){
		try{
			Iterator<RpDjconstruccion> it = records.iterator();  
			recordsxNivel=new ArrayList<NivelConstruccion>();
	        while (it.hasNext()){
	        	RpDjconstruccion obj = it.next();
	        	RpDjusoDetalle detalle=registroPrediosBo.getRpDjusoDetalle(getRpDjuso().getDjusoId(),obj.getConstruccionId());
	        	
	        	NivelConstruccion nivel=new NivelConstruccion(obj);
	        	
	        	Integer djId=(Integer)FacesUtil.getSessionMapValue(FacesContext.getCurrentInstance(), "NextDjId");
	        	Integer djArbitrioId=registroPrediosBo.getDjArbitrioId(djId);
	        	if(detalle!=null){
		        	if(djArbitrioId!=null&&djArbitrioId>0){
		        		BigDecimal areaUsada=registroPrediosBo.getAreaUsada(djArbitrioId,nivel.getConstruccionId());
		        		if(areaUsada!=null){
		        			nivel.setAreaUsada(new BigDecimal(areaUsada.doubleValue()-detalle.getAreaUso().doubleValue()));
		        		}else{
		        			nivel.setAreaUsada(new BigDecimal(0));
		        		}
		        	}else{
		        		nivel.setAreaUsada(new BigDecimal(0));
		        	}
		        	
		        	nivel.setAreaAsignada(detalle.getAreaUso()==null?new BigDecimal(0):detalle.getAreaUso());
		        	nivel.setMesInicio(mapIRjMes.get(detalle.getMesInicio().trim()));
		        	nivel.setMesFin(mapIRjMes.get(detalle.getMesFin().trim()));
		        	nivel.setConfirmacion(Boolean.TRUE);
		        	nivel.setReferencia(detalle.getGlosa());		        	
	        	}else{
	        		if(djArbitrioId!=null&&djArbitrioId>0){
		        		nivel.setAreaUsada(registroPrediosBo.getAreaUsada(djArbitrioId,nivel.getConstruccionId()));
		        	}else{
		        		nivel.setAreaUsada(new BigDecimal(0));
		        	}
		        	nivel.setAreaAsignada(new BigDecimal(0));
		        	//nivel.setMesInicio(null);
		        	nivel.setMesInicio("Enero");
		        	nivel.setMesFin("Diciembre");
		        	nivel.setConfirmacion(Boolean.FALSE);
	        	}
	        	recordsxNivel.add(nivel);
	        	loadUsosSinTerreno();	/** 17-09-2014* No muestra el uso Terreno sin Construir, cuando existe una construcciÃ³n: Memorandum:006-012-846 */
	        }
		}catch(Exception e){
			WebMessages.messageFatal(e);
			e.printStackTrace();
		}
	}
	
	public void limpiar(){
		try
		{
		 rpDjuso=new RpDjuso();
		 //Se corrige el aï¿½o de afectacion para los USOS
	        Integer djId=(Integer)FacesUtil.getSessionMapValue(FacesContext.getCurrentInstance(), "NextDjId");
			if(djId==null||djId==Constante.RESULT_PENDING){
				rpDjuso.setAnnoAfectacion(DateUtil.getAnioActual());
			}else{
				RpDjpredial rpdjpredial = registroPrediosBo.getRpDjpredial(djId);
				rpDjuso.setAnnoAfectacion(rpdjpredial.getAnnoDj());
			}
	     getCmbRpTipoUso().setValue("");
	     loadNewNivelesConstruccion(getRecords());
	     
		}catch(Exception e){
			WebMessages.messageFatal(e);
			e.printStackTrace();
		}
	}
	public void setProperty(RpDjuso uso){
		setRpDjuso(uso);
		
		String valueTipoUso=(mapIRpTipoUso.get(uso.getTipoUsoId())!=null)?mapIRpTipoUso.get(uso.getTipoUsoId()):"";
		getCmbRpTipoUso().setValue(valueTipoUso);
		
	}
	
	public RpDjuso getRpDjuso() {
		return rpDjuso;
	}

	public void setRpDjuso(RpDjuso rpDjuso) {
		this.rpDjuso = rpDjuso;
	}

	public List<SelectItem> getLstmes() {
		return lstmes;
	}

	public void setLstmes(List<SelectItem> lstmes) {
		this.lstmes = lstmes;
	}
	public HtmlComboBox getCmbRpTipoUso() {
		return cmbRpTipoUso;
	}

	public void setCmbRpTipoUso(HtmlComboBox cmbRpTipoUso) {
		this.cmbRpTipoUso = cmbRpTipoUso;
	}

	public String getCmbValueRpTipoUso() {
		return cmbValueRpTipoUso;
	}

	public void setCmbValueRpTipoUso(String cmbValueRpTipoUso) {
		this.cmbValueRpTipoUso = cmbValueRpTipoUso;
	}
	public List<SelectItem> getLstTipoUso() {
		return lstTipoUso;
	}

	public void setLstTipoUso(List<SelectItem> lstTipoUso) {
		this.lstTipoUso = lstTipoUso;
	}
	public NivelConstruccion getCurrentItem() {
		return currentItem;
	}

	public void setCurrentItem(NivelConstruccion currentItem) {
		this.currentItem = currentItem;
	}
	
	public ArrayList<NivelConstruccion> getRecordsxNivel() {
		return recordsxNivel;
	}

	public void setRecordsxNivel(ArrayList<NivelConstruccion> recordsxNivel) {
		this.recordsxNivel = recordsxNivel;
	}

	public Boolean getIsEditable() {
		return getRpDjuso().getDjusoId()>0?Boolean.TRUE:Boolean.FALSE;
	}
	
	public Boolean getDisabled() {
		return disabled;
	}
	public void setDisabled(Boolean disabled) {
		this.disabled = disabled;
	}
}
